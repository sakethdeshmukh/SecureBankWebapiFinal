//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SecureBank.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectBankingEntities : DbContext
    {
        public ProjectBankingEntities()
            : base("name=ProjectBankingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountDetail> AccountDetails { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<BeneficiaryDetail> BeneficiaryDetails { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<OccupationDetail> OccupationDetails { get; set; }
        public virtual DbSet<PermanentAddress> PermanentAddresses { get; set; }
        public virtual DbSet<ResidentialAddress> ResidentialAddresses { get; set; }
        public virtual DbSet<StatusTracking> StatusTrackings { get; set; }
        public virtual DbSet<TransactionDetail> TransactionDetails { get; set; }
    
        public virtual ObjectResult<sp_accountstatement_between_twodates_Result> sp_accountstatement_between_twodates(Nullable<System.DateTime> begindate, Nullable<System.DateTime> enddate, Nullable<int> cid)
        {
            var begindateParameter = begindate.HasValue ?
                new ObjectParameter("begindate", begindate) :
                new ObjectParameter("begindate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_accountstatement_between_twodates_Result>("sp_accountstatement_between_twodates", begindateParameter, enddateParameter, cidParameter);
        }
    
        public virtual int sp_adminapproval(Nullable<int> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_adminapproval", cidParameter);
        }
    
        public virtual int sp_admindispproval(Nullable<int> cID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_admindispproval", cIDParameter);
        }
    
        public virtual int sp_deleterecords(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleterecords", idParameter);
        }
    
        public virtual ObjectResult<sp_pendingapprovals_Result> sp_pendingapprovals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pendingapprovals_Result>("sp_pendingapprovals");
        }
    
        public virtual int sp_registeruser(Nullable<long> accountNumber, string password, string transactionPassword)
        {
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var transactionPasswordParameter = transactionPassword != null ?
                new ObjectParameter("TransactionPassword", transactionPassword) :
                new ObjectParameter("TransactionPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_registeruser", accountNumberParameter, passwordParameter, transactionPasswordParameter);
        }
    
        public virtual ObjectResult<sp_Transfer_successsful_Result> sp_Transfer_successsful(Nullable<int> referenceid)
        {
            var referenceidParameter = referenceid.HasValue ?
                new ObjectParameter("referenceid", referenceid) :
                new ObjectParameter("referenceid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Transfer_successsful_Result>("sp_Transfer_successsful", referenceidParameter);
        }
    
        public virtual ObjectResult<sp_viewapprovals_Result> sp_viewapprovals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_viewapprovals_Result>("sp_viewapprovals");
        }
    
        public virtual ObjectResult<sp_viewpendingapprovals_Result> sp_viewpendingapprovals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_viewpendingapprovals_Result>("sp_viewpendingapprovals");
        }
    
        public virtual ObjectResult<sp_ViewCustomerDetails_Result> sp_ViewCustomerDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewCustomerDetails_Result>("sp_ViewCustomerDetails", idParameter);
        }
    
        public virtual ObjectResult<sp_accstatement_between_twodates_Result> sp_accstatement_between_twodates(Nullable<System.DateTime> begindate, Nullable<System.DateTime> enddate, Nullable<long> accountNumber)
        {
            var begindateParameter = begindate.HasValue ?
                new ObjectParameter("begindate", begindate) :
                new ObjectParameter("begindate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_accstatement_between_twodates_Result>("sp_accstatement_between_twodates", begindateParameter, enddateParameter, accountNumberParameter);
        }
    }
}
